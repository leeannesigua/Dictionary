/*Lee Anne Sigua
 * masc0839
 */
package data_structures;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.TreeMap;

public class RedBlackTree<K,V> implements DictionaryADT<K,V> {
	TreeMap<K,V> tree;
	
	public RedBlackTree(){
		tree = new TreeMap<K,V>();
		
	}
	@Override
	public boolean contains(K key) {
		if (tree.containsKey(key))
			return true;
		return false;
	}

	@Override
	// Adds the given key/value pair to the dictionary.  Returns 
	// false if the dictionary is full, or if the key is a duplicate.
	// Returns true if addition succeeded.
	public boolean add(K key, V value) {
		if(contains(key))
			return false;
		tree.put(key, value);
		return true;
	}

	@Override
	// Deletes the key/value pair identified by the key parameter.
	// Returns true if the key/value pair was found and removed,
	// otherwise false.
	public boolean delete(K key) {
		if(!contains(key))
			return false;
		tree.remove(key);
		return true;
	}

	@Override
	// Returns the value associated with the parameter key.  Returns
	// null if the key is not found or the dictionary is empty.
	public V getValue(K key) {
		return tree.get(key);
	}

	@Override
	// Returns the key associated with the parameter value.  Returns
	// null if the value is not found in the dictionary.  If more 
	// than one key exists that matches the given value, returns the
	// first one found. 
	public K getKey(V value) {
		for(Entry<K,V> currEnt: tree.entrySet())
			if(((Comparable<V>)value).compareTo((V)currEnt.getValue()) == 0) //given the value parameter compare to the value of that key (currEnt)
				return currEnt.getKey();
			return null;
	}

	@Override
	public int size() {
		return tree.size();
	}

	@Override
	// Returns true if the dictionary has a max capacity and is at max capacity
	public boolean isFull() {
		return false;
	}

	@Override
	// Returns true if the dictionary is empty
	public boolean isEmpty() {
		if(tree.isEmpty())
			return true;
		return false;
	}

	@Override
	public void clear() {
		tree.clear();
		
	}

	@Override
	// Returns an Iterator of the keys in the dictionary, in ascending
	// sorted order.  The iterator must be fail-fast.
	public Iterator<K> keys() {
		return tree.keySet().iterator();
		
	}

	@Override
	// Returns an Iterator of the values in the dictionary.  The
	// order of the values must match the order of the keys. 
	// The iterator must be fail-fast. 
	public Iterator<V> values() {
		return tree.values().iterator();
		
	}

}
